geom.ind = "point",
label ="var",
addEllipses = TRUE,
palette = c("grey"))
# PCA loading plot
loadings = as.data.frame(pca_result$rotation[,1:3])
loadings$Symbol = row.names(loadings)
loadings = gather(loadings, key='Component', value='Weight', -Symbol)
ggplot(loadings, aes(x=Symbol,y=Weight)) +
geom_bar(stat='identity') +
facet_grid(Component~.)
pillar_data <- cleaned_data %>%
select(Tax_Burden:Financial_Freedom)
glimpse(pillar_data)
pillar_data_scaled <- scale(pillar_data)
pillar_data_scaled
# Step 2: Perform PCA
pca_result <- prcomp(pillar_data_scaled, scale. = TRUE)
summary(pca_result)
# Calculation of each PCA variance
variance = pca_result$sdev^2 / sum(pca_result$sdev^2)
variance
# Extract eigenvalues/variances
get_eig(pca_result)
# Step 3: Visualizations
#--- > Scree plot (X = 1 to 12 pillar)
ggplot(NULL,aes(x=1:9,y=100*variance)) +
geom_col()+
ggtitle("Screeplot of 9 piller variance")
#using factoextra library to plot scree-plots
fviz_screeplot(pca_result, addlabels = TRUE, ylim = c(0, 50))
# PCA bi plot
autoplot(pca_result,
label=TRUE, label.size=3, shape=FALSE,
loadings=TRUE, loadings.label=TRUE)
#PCA bi plot in facto extra
# Bi plot of 12 pillar variables
fviz_pca_biplot(pca_result,
repel = TRUE,
axex=c(1,2),
geom.ind = "point",
label ="var",
addEllipses = TRUE,
palette = c("grey"))
# PCA bi plot
autoplot(pca_result,
label=TRUE, label.size=3, shape=FALSE,
loadings=TRUE, loadings.label=TRUE)
#PCA bi plot in facto extra
# Bi plot of 12 pillar variables
fviz_pca_biplot(pca_result,
repel = TRUE,
axex=c(2,3),
geom.ind = "point",
label ="var",
addEllipses = TRUE,
palette = c("grey"))
#PCA bi plot in facto extra
# Bi plot of 12 pillar variables
fviz_pca_biplot(pca_result,
repel = TRUE,
axex=c(1,2),
geom.ind = "point",
label ="var",
addEllipses = TRUE,
palette = c("grey"))
# PCA bi plot
autoplot(pca_result,
label=TRUE, label.size=3, shape=FALSE,
loadings=TRUE, loadings.label=TRUE)
# PCA loading plot
loadings = as.data.frame(pca_result$rotation[,1:3])
loadings$Symbol = row.names(loadings)
loadings = gather(loadings, key='Component', value='Weight', -Symbol)
ggplot(loadings, aes(x=Symbol,y=Weight)) +
geom_bar(stat='identity') +
facet_grid(Component~.)
# PCA loading plot
loadings = as.data.frame(pca_result$rotation[,1:4])
loadings$Symbol = row.names(loadings)
loadings = gather(loadings, key='Component', value='Weight', -Symbol)
ggplot(loadings, aes(x=Symbol,y=Weight)) +
geom_bar(stat='identity') +
facet_grid(Component~.)
library(cluster)
pillar_data <- cleaned_data %>%
select(Property_Rights:Financial_Freedom)
# importing data
data = read_csv('data/index_of_economic_freedom_2024.csv')
setwd("C:/Users/acer/Desktop/7144CEM_Principles_DataScience_GroupWork")
# List of required libraries
required_packages <- c("tidyverse", "GGally", "ggfortify", "cluster", "factoextra")
# Load all libraries
lapply(required_packages, library, character.only = TRUE)
# importing data
data = read_csv('data/index_of_economic_freedom_2024.csv')
colnames(data)
glimpse(data)
# Remove NA values
cleaned_data = na.omit(data)
# sorting overall score from high to low
cleaned_data<- cleaned_data%>%
arrange(desc(Overall_Score))
# data type
str(cleaned_data)
pillar_data <- cleaned_data %>%
select(Property_Rights:Financial_Freedom)
glimpse(pillar_data)
#Standardize the data
pillar_data_scaled <- scale(pillar_data)
pillar_data_scaled
pillar_data <- cleaned_data %>%
select(Property_Rights:Financial_Freedom)
glimpse(pillar_data)
pillar_data <- cleaned_data %>%
select(Property_Rights:Financial_Freedom)
glimpse(pillar_data)
pillar_data_scaled <- scale(pillar_data)
pillar_data_scaled
summary(piller_scaled_data)
summary(pillar_scaled_data)
summary(pillar_data_scaled)
# Carry out PCA (with scaling)
nut_sub = select(nutrition,-country,-type)
# Carry out PCA (with scaling)
nut_sub = select(pillar_data_scaled,-country,-type)
# Carry out PCA (with scaling)
nut_sub = select(pillar_data,-country,-type)
# Carry out PCA (with scaling)
nut_sub = select(cleaned_data,-country,-type)
# Carry out PCA (with scaling)
nut_sub = select(cleaned_data,-Country,-type)
# Carry out PCA (with scaling)
nut_sub = select(cleaned_data,-Country)
pca_results = prcomp(nut_sub, scale.=TRUE)
#Standardize the data
pillar_data_scaled <- scale(pillar_data)
pillar_data_scaled
# Carry out PCA (with scaling)
nut_sub = select(cleaned_data_scaled)
# Carry out PCA (with scaling)
nut_sub = select(pillar_data_scaled)
pillar_data_scaled %>% select(-Country) %>% ggpairs(aes(colour=type))
cleaned_data %>%
select(-Country) %>% ggpairs(aes(colour=type))
cleaned_data %>%
select(-Country) %>%
ggpairs(aes(colour=type))
cleaned_data %>%
filter(-Country) %>%
select(Property_Rights:Financial_Freedom)
cleaned_data %>%
filter(Country) %>%
select(Property_Rights:Financial_Freedom)
cleaned_data <- cleaned_data %>%
filter((Country)) %>%
select(Property_Rights:Financial_Freedom)
cleaned_data <- cleaned_data %>%
filter((Country)) %>%
select(Property_Rights:Financial_Freedom) +
ggpairs(aes(colour=type))
cleaned_data = cleaned_data %>%
filter(Country) %>%
select(Property_Rights:Financial_Freedom)
# Load all libraries
lapply(required_packages, library, character.only = TRUE)
# importing data
data = read_csv('data/index_of_economic_freedom_2024.csv')
colnames(data)
glimpse(data)
# Remove NA values
cleaned_data = na.omit(data)
# sorting overall score from high to low
cleaned_data<- cleaned_data%>%
arrange(desc(Overall_Score))
# data type
str(cleaned_data)
#visualize
ggplot(cleaned_data, aes(x = Region, y = Overall_Score, fill = Region)) +
geom_boxplot() +
labs(
title = "Distribution of Overall Score",
x = "Region",
y = "Overall_Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cleaned_data = cleaned_data %>%
filter(Country) %>%
select(Property_Rights:Financial_Freedom)
cleaned_data = cleaned_data %>%
select(Property_Rights:Financial_Freedom)
pillar_data <- cleaned_data %>%
select(Property_Rights:Financial_Freedom)
glimpse(pillar_data)
pca_results = prcomp(pillar_data, scale.=TRUE)
# PCA biplot (standard code template with additions)
library(ggfortify)
autoplot(pca_results,
label=TRUE, label.size=4, shape=FALSE,
loadings=TRUE, loadings.label=TRUE,
loadings.label.size=4,
data=nutrition, colour='type')
pca_results = prcomp(pillar_data, scale.=TRUE)
# PCA biplot (standard code template with additions)
library(ggfortify)
autoplot(pca_results,
label=TRUE, label.size=4, shape=FALSE,
loadings=TRUE, loadings.label=TRUE,
loadings.label.size=4,
data=pillar_data, colour='type')
pca_result = prcomp(pillar_data, scale.=TRUE)
# PCA biplot (standard code template with additions)
autoplot(pca_result,
label=TRUE, label.size=4, shape=FALSE,
loadings=TRUE, loadings.label=TRUE,
loadings.label.size=4,
data=pillar_data, colour='type')
pca_result = prcomp(pillar_data, scale.=TRUE)
# PCA biplot (standard code template with additions)
autoplot(pca_result,
label=TRUE, label.size=4, shape=FALSE,
loadings=TRUE, loadings.label=TRUE,
loadings.label.size=4,
data=pillar_data)
autoplot(pca_result,
label=TRUE, label.size=4, shape=FALSE,
loadings=TRUE, loadings.label=TRUE,
loadings.label.size=4,
data=pillar_data) +
coord_fixed(ratio=14.36/52.15)
# Load all libraries
lapply(required_packages, library, character.only = TRUE)
# importing data
data = read_csv('data/index_of_economic_freedom_2024.csv')
colnames(data)
glimpse(data)
# Remove NA values
cleaned_data = na.omit(data)
# sorting overall score from high to low
cleaned_data<- cleaned_data%>%
arrange(desc(Overall_Score))
# data type
str(cleaned_data)
#visualize
ggplot(cleaned_data, aes(x = Region, y = Overall_Score, fill = Region)) +
geom_boxplot() +
labs(
title = "Distribution of Overall Score",
x = "Region",
y = "Overall_Score"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# PCA Analysis
# Extract the 12 pillar variables from
pillar_data <- cleaned_data %>%
select(Property_Rights:Financial_Freedom)
glimpse(pillar_data)
#Standardize the data
pillar_data_scaled <- scale(pillar_data)
pillar_data_scaled
# Step 2: Perform PCA
pca_result <- prcomp(pillar_data_scaled, scale. = TRUE)
summary(pca_result)
# Calculation of each PCA variance
variance = pca_result$sdev^2 / sum(pca_result$sdev^2)
variance
# Extract eigenvalues/variances
get_eig(pca_result)
# Step 3: Visualizations
#--- > Scree plot (X = 1 to 12 pillar)
ggplot(NULL,aes(x=1:12,y=100*variance)) +
geom_col()+
ggtitle("Screeplot of 12 piller variance")
#using factoextra library to plot scree-plots
fviz_screeplot(pca_result, addlabels = TRUE, ylim = c(0, 60))
# PCA bi plot
autoplot(pca_result,
label=TRUE, label.size=3, shape=FALSE,
loadings=TRUE, loadings.label=TRUE)
#PCA bi plot in facto extra
# Bi plot of 12 pillar variables
fviz_pca_biplot(pca_result,
repel = TRUE,
axex=c(1,2),
geom.ind = "point",
label ="var",
addEllipses = TRUE,
palette = c("grey"))
# PCA loading plot
loadings = as.data.frame(pca_result$rotation[,1:3])
loadings$Symbol = row.names(loadings)
loadings = gather(loadings, key='Component', value='Weight', -Symbol)
ggplot(loadings, aes(x=Symbol,y=Weight)) +
geom_bar(stat='identity') +
facet_grid(Component~.)
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="Country")
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="")
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=12)
cutree(cluster_results, k=12)
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=3)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
#============================================================
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
# Compute the distance matrix using Manhattan distance
D <- dist(scale(pillar_data), method = "manhattan")
# Perform hierarchical clustering using Ward's method
cluster_results <- agnes(D, method = "ward")
# Plot the dendrogram
plot(cluster_results, which.plots = 2, main = "Dendrogram (Ward's Method, Manhattan Distance)")
# ut the dendrogram into 4 clusters
clusters <- cutree(as.hclust(cluster_results), k = 4)
# Highlight clusters on the dendrogram
rect.hclust(as.hclust(cluster_results), k = 4, border = "red")
# Print the cluster assignments
print(clusters)
# Define distance metrics and linkage method
distance_metrics <- c("euclidean", "manhattan")
linkage_method <- "ward"
# Initialize a results data frame
comparison_results <- data.frame(
Metric = character(),
Agglomerative_Coefficient = numeric(),
stringsAsFactors = FALSE
)
# Loop through distance metrics to perform clustering
for (metric in distance_metrics) {
# Compute the distance matrix
D <- dist(scale(pillar_data), method = metric)
# Perform hierarchical clustering
cluster_result <- agnes(D, method = linkage_method)
# Store the agglomerative coefficient
comparison_results <- rbind(
comparison_results,
data.frame(Metric = metric, Agglomerative_Coefficient = cluster_result$ac)
)
# Plot dendrogram for each metric
plot(cluster_result, which.plots = 2, main = paste("Dendrogram (", metric, " Distance, Ward's Method)", sep = ""))
}
# Print the comparison results
print(comparison_results)
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
####
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="linkage")
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="singe linkage")
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="singelinkage")
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="single linkage")
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
####
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(scale(pillar_data), method="euclidean")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
print(cluster_results$ac)
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
print(cluste_results$ac)
#cluster
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
print(cluster_results$ac)
D = dist(scale(pillar_data), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=4)
cutree(cluster_results, k=4)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="manhattan")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="euclidean")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="euclidean")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="elucidean")
D = dist(t(scale(pillar_data)), method="euclidean")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="euclidean")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="manhattan")
cluster_results = agnes(D, method="ward")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
D = dist(t(scale(pillar_data)), method="manhattan")
cluster_results = agnes(D, method="single")
plot(cluster_results, which.plots=2)
rect.hclust(cluster_results, k=5)
cutree(cluster_results, k=5)
print(cluster_results$ac)
